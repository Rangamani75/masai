import React, { useEffect, useMemo, useState } from "react";

const uid = () => Math.random().toString(36).slice(2, 9);

function markdownToHtml(md){
  if(!md) return "";
  return md
    .replace(/(\*\*|__)(.*?)\1/g, '<strong>$2</strong>')
    .replace(/(\*|_)(.*?)\1/g, '<em>$2</em>')
    .replace(/\n/g, '<br/>')
    .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noreferrer">$1</a>');
}

function useLocalStorage(key, initial){
  const [state, setState] = useState(()=>{
    try{const s = localStorage.getItem(key); return s? JSON.parse(s): initial}catch(e){return initial}
  });
  useEffect(()=>{localStorage.setItem(key, JSON.stringify(state))},[key,state]);
  return [state, setState];
}

function dayKey(date){
  const d = new Date(date);
  d.setHours(0,0,0,0);
  return d.toISOString();
}

export default function MindTrackApp(){
  const [entries, setEntries] = useLocalStorage('mindtrack:entries', []);
  const [mentorComments, setMentorComments] = useLocalStorage('mindtrack:mentor', []);
  const [profile, setProfile] = useLocalStorage('mindtrack:profile', {name:'Student', mentorOptIn:false});
  const [form, setForm] = useState({studyHours:2,breakMinutes:30,sleepHours:7,stressLevel:3,focusLevel:3,reflection:''});
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [view, setView] = useState('track');
  const [mentorMode, setMentorMode] = useState(false);
  const todayKey = dayKey(new Date());

  useEffect(()=>{
    const notif = () => {
      if(Notification && Notification.permission==='granted'){
        new Notification('MindTrack reminder','Remember to log today\'s study & wellness!');
      }
    };
    if(Notification && Notification.permission==='default') Notification.requestPermission();
    const last = localStorage.getItem('mindtrack:lastNudge');
    if(!last || new Date().getTime()-Number(last) > 24*3600*1000){
      notif();
      localStorage.setItem('mindtrack:lastNudge', String(new Date().getTime()));
    }
  },[]);

  const saveEntry = (date=new Date())=>{
    const key = dayKey(date);
    const existing = entries.find(e=>e.day===key);
    const payload = {id: existing? existing.id: uid(), day:key, date:new Date(key).toISOString(), ...form};
    let next;
    if(existing) next = entries.map(e=> e.day===key? payload: e);
    else next = [...entries, payload].sort((a,b)=> new Date(b.day)-new Date(a.day));
    setEntries(next);
  };

  const deleteEntry = (id)=> setEntries(entries.filter(e=>e.id!==id));

  const addMentorComment = (entryId, text)=>{
    const c = {id:uid(), entryId, text, date:new Date().toISOString()};
    setMentorComments([c,...mentorComments]);
  };

  const getEntry = (date)=> entries.find(e=> e.day===dayKey(date));

  const lastNDays = (n)=>{
    const arr=[];
    for(let i=0;i<n;i++){ const d=new Date(); d.setDate(d.getDate()-i); arr.push(d); }
    return arr;
  };

  const streak = useMemo(()=>{
    const setDays = new Set(entries.map(e=>e.day));
    let s=0; let d=new Date(); while(setDays.has(dayKey(d))){ s++; d.setDate(d.getDate()-1);} return s; },[entries]);

  const heatmapData = useMemo(()=>{
    const days = lastNDays(30).reverse();
    return days.map(d=>({day:d, entry:getEntry(d)}));
  },[entries, selectedDate]);

  const insights = useMemo(()=>{
    const last7 = entries.slice(0,7);
    if(last7.length<4) return [];
    const avg = arr=> arr.reduce((s,x)=>s+x,0)/arr.length;
    const sleepArr = last7.map(e=>e.sleepHours);
    const focusArr = last7.map(e=>e.focusLevel);
    const breakArr = last7.map(e=>e.breakMinutes);
    const stressArr = last7.map(e=>e.stressLevel);
    const insights=[];
    const sleepCorr = corr(sleepArr, focusArr);
    if(sleepCorr>0.2) insights.push('You focus better after more sleep. Try keeping sleep 7-9 hours.');
    const breakCorr = corr(breakArr, stressArr);
    if(breakCorr< -0.15) insights.push('Longer breaks in your logs correlate with lower stress. Consider scheduling short pauses.');
    const studyStressCorr = corr(last7.map(e=>e.studyHours), stressArr);
    if(studyStressCorr>0.2) insights.push('More study hours are linked to increased stress; try shorter deep-focus sessions with breaks.');
    return insights;
  },[entries]);

  function corr(a,b){
    if(a.length!==b.length || a.length===0) return 0;
    const n=a.length; const ma=a.reduce((s,x)=>s+x,0)/n; const mb=b.reduce((s,x)=>s+x,0)/n;
    let num=0, da=0, db=0;
    for(let i=0;i<n;i++){ num+=(a[i]-ma)*(b[i]-mb); da += (a[i]-ma)*(a[i]-ma); db += (b[i]-mb)*(b[i]-mb);} 
    if(da===0||db===0) return 0; return num/Math.sqrt(da*db);
  }

  const exportMonth = (year, month)=>{
    const start = new Date(year,month,1); const end = new Date(year,month+1,0);
    const subset = entries.filter(e=>{ const d=new Date(e.day); return d>=start && d<=end; });
    const html = `<!doctype html><html><head><meta charset="utf-8"><title>MindTrack ${year}-${month+1}</title></head><body>`+
      `<h1>MindTrack Summary ${year}-${month+1}</h1>` + subset.map(s=>{
        return `<div style="border:1px solid #ddd;padding:8px;margin:6px">`+
          `<div><strong>${new Date(s.day).toDateString()}</strong></div>`+
          `<div>Study Hours: ${s.studyHours} | Break: ${s.breakMinutes} mins | Sleep: ${s.sleepHours} | Stress: ${s.stressLevel} | Focus: ${s.focusLevel}</div>`+
          `<div>${markdownToHtml(s.reflection)}</div></div>`;
      }).join('') + '</body></html>';
    const w = window.open('','_blank'); w.document.write(html); w.document.close(); w.print();
  };

  const renderHeatCell = (d)=>{
    const e = getEntry(d);
    const level = e? Math.min(4, Math.ceil((e.focusLevel)/1.5)):0;
    const shades = ['bg-gray-100','bg-green-100','bg-green-300','bg-green-500','bg-green-700'];
    return (
      <div key={d.toISOString()} className={`w-8 h-8 flex items-center justify-center text-xs border ${shades[level]} rounded-sm`} title={d.toDateString()}>
        {e? '‚óè':''}
      </div>
    );
  };

  const todayEntry = getEntry(new Date());

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white p-6 font-sans">
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2 bg-white p-6 rounded-2xl shadow">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-2xl font-semibold">MindTrack</h1>
            <div className="flex items-center gap-3">
              <div className="text-sm text-gray-600">Streak: <span className="font-bold">{streak}</span></div>
              <button onClick={()=>setView('track')} className={`px-3 py-1 rounded ${view==='track'?'bg-slate-900 text-white':'bg-slate-100'}`}>Track</button>
              <button onClick={()=>setView('journal')} className={`px-3 py-1 rounded ${view==='journal'?'bg-slate-900 text-white':'bg-slate-100'}`}>Journal</button>
              <button onClick={()=>setView('mentor')} className={`px-3 py-1 rounded ${view==='mentor'?'bg-slate-900 text-white':'bg-slate-100'}`}>Mentor</button>
            </div>
          </div>

          {view==='track' && (
            <div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <label className="block">Study Hours</label>
                  <input type="number" value={form.studyHours} min={0} step={0.5} onChange={e=>setForm({...form,studyHours: Number(e.target.value)})} className="w-full p-2 border rounded" />
                  <label>Break Minutes</label>
                  <input type="number" value={form.breakMinutes} min={0} onChange={e=>setForm({...form,breakMinutes: Number(e.target.value)})} className="w-full p-2 border rounded" />
                  <label>Sleep Hours</label>
                  <input type="number" value={form.sleepHours} min={0} step={0.5} onChange={e=>setForm({...form,sleepHours: Number(e.target.value)})} className="w-full p-2 border rounded" />
                </div>
                <div className="space-y-3">
                  <label>Stress Level (1-5)</label>
                  <input type="range" min={1} max={5} value={form.stressLevel} onChange={e=>setForm({...form,stressLevel: Number(e.target.value)})} />
                  <div> {form.stressLevel}</div>
                  <label>Focus Level (1-5)</label>
                  <input type="range" min={1} max={5} value={form.focusLevel} onChange={e=>setForm({...form,focusLevel: Number(e.target.value)})} />
                  <div> {form.focusLevel}</div>
                </div>
              </div>

              <div className="mt-4">
                <label>Reflection (markdown)</label>
                <textarea value={form.reflection} onChange={e=>setForm({...form,reflection:e.target.value})} className="w-full p-2 h-28 border rounded" />
              </div>

              <div className="flex gap-3 mt-4">
                <button onClick={()=>saveEntry(selectedDate)} className="px-4 py-2 bg-blue-600 text-white rounded">Save Entry for Selected Day</button>
                <button onClick={()=>saveEntry(new Date())} className="px-4 py-2 bg-green-600 text-white rounded">Save for Today</button>
                <button onClick={()=>{setForm({studyHours:2,breakMinutes:30,sleepHours:7,stressLevel:3,focusLevel:3,reflection:''})}} className="px-4 py-2 bg-gray-200 rounded">Clear</button>
              </div>

              <div className="mt-6">
                <h3 className="font-semibold">Quick Heatmap (last 30 days)</h3>
                <div className="grid grid-cols-7 gap-1 mt-2">{heatmapData.map(h=> renderHeatCell(h.day))}</div>
              </div>

              <div className="mt-6">
                <h3 className="font-semibold">Insights</h3>
                {insights.length? (<ul className="list-disc pl-5 mt-2">{insights.map((s,i)=><li key={i}>{s}</li>)}</ul>): <div className="text-sm text-gray-500 mt-2">Collect more data (at least 4 entries) for personalized insights.</div>}
              </div>

            </div>
          )}

          {view==='journal' && (
            <div>
              <div className="flex items-center gap-3">
                <input type="date" value={new Date(selectedDate).toISOString().slice(0,10)} onChange={e=>setSelectedDate(new Date(e.target.value))} className="p-2 border rounded" />
                <button onClick={()=>{ const e = getEntry(selectedDate); if(e) setForm({...e}); else alert('No entry for this day');}} className="px-3 py-1 bg-slate-100 rounded">Load</button>
                <button onClick={()=>{const e = getEntry(selectedDate); if(e) { navigator.clipboard.writeText(JSON.stringify(e)); alert('Copied'); } else alert('No entry') }} className="px-3 py-1 bg-slate-100 rounded">Copy JSON</button>
                <button onClick={()=>exportMonth(new Date().getFullYear(), new Date().getMonth())} className="px-3 py-1 bg-indigo-600 text-white rounded">Export This Month</button>
              </div>

              <div className="mt-4 space-y-4">
                {entries.length===0? <div className="text-gray-500">No entries yet. Start logging!</div> : entries.map(e=> (
                  <div key={e.id} className="p-3 border rounded-lg">
                    <div className="flex justify-between">
                      <div><strong>{new Date(e.day).toDateString()}</strong></div>
                      <div className="flex gap-2">
                        <button onClick={()=>{ setForm({...e}); setView('track')}} className="px-2 py-1 bg-slate-100 rounded">Edit</button>
                        <button onClick={()=>deleteEntry(e.id)} className="px-2 py-1 bg-red-100 rounded">Delete</button>
                      </div>
                    </div>
                    <div className="mt-2 text-sm">Study {e.studyHours}h ‚Ä¢ Break {e.breakMinutes}m ‚Ä¢ Sleep {e.sleepHours}h ‚Ä¢ Stress {e.stressLevel} ‚Ä¢ Focus {e.focusLevel}</div>
                    <div className="mt-2 text-sm" dangerouslySetInnerHTML={{__html: markdownToHtml(e.reflection)}} />
                    <div className="mt-2 text-xs text-gray-500">Mentor comments:</div>
                    <div className="mt-1">{mentorComments.filter(c=>c.entryId===e.id).map(c=> <div key={c.id} className="text-sm p-1 bg-gray-50 rounded mt-1">{c.text} <span className="text-xs text-gray-400">‚Ä¢ {new Date(c.date).toLocaleString()}</span></div>)}</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {view==='mentor' && (
            <div>
              <div className="flex items-center justify-between">
                <div>
                  <label className="flex items-center gap-2"><input type="checkbox" checked={mentorMode} onChange={e=>setMentorMode(e.target.checked)} /> Mentor Mode (view anonymized opt-in entries)</label>
                </div>
                <div>
                  <label className="flex items-center gap-2"><input type="checkbox" checked={profile.mentorOptIn} onChange={e=>setProfile({...profile,mentorOptIn:e.target.checked})} /> I allow anonymized mentor review</label>
                </div>
              </div>

              {mentorMode? (
                <div className="mt-4 space-y-4">
                  {entries.filter(e=> profile.mentorOptIn).map(e=> (
                    <div key={e.id} className="p-3 border rounded-lg">
                      <div className="flex justify-between items-center">
                        <div><strong>{new Date(e.day).toDateString()}</strong> ‚Ä¢ Focus {e.focusLevel} ‚Ä¢ Stress {e.stressLevel}</div>
                        <div>
                          <button onClick={()=>{ const t = prompt('Write a positive comment'); if(t) addMentorComment(e.id,t);}} className="px-2 py-1 bg-blue-600 text-white rounded">Add Comment</button>
                        </div>
                      </div>
                      <div className="mt-2 text-sm" dangerouslySetInnerHTML={{__html: markdownToHtml(e.reflection)}} />
                      <div className="mt-2 text-xs text-gray-500">Comments:</div>
                      <div className="mt-1">{mentorComments.filter(c=>c.entryId===e.id).map(c=> <div key={c.id} className="text-sm p-1 bg-yellow-50 rounded mt-1">{c.text} <span className="text-xs text-gray-400">‚Ä¢ {new Date(c.date).toLocaleString()}</span></div>)}</div>
                    </div>
                  ))}
                  {entries.filter(e=> profile.mentorOptIn).length===0 && <div className="text-gray-500 mt-4">No opt-in entries available for mentor review.</div>}
                </div>
              ) : (
                <div className="text-gray-500 mt-4">Enable Mentor Mode to review anonymized entries.</div>
              )}

            </div>
          )}

        </div>

        <div className="bg-white p-6 rounded-2xl shadow">
          <div className="mb-4">
            <h3 className="font-semibold">Today</h3>
            <div className="text-sm text-gray-600">{new Date().toDateString()}</div>
            {todayEntry? (
              <div className="mt-2 text-sm">Logged: Study {todayEntry.studyHours}h ‚Ä¢ Sleep {todayEntry.sleepHours}h ‚Ä¢ Focus {todayEntry.focusLevel}</div>
            ) : (
              <div className="mt-2 text-sm text-red-500">No log for today</div>
            )}
          </div>

          <div className="mb-4">
            <h3 className="font-semibold">Quick Actions</h3>
            <div className="flex flex-col gap-2 mt-2">
              <button onClick={()=>{ setForm({studyHours:2,breakMinutes:30,sleepHours:7,stressLevel:3,focusLevel:3,reflection:''}); setView('track'); }} className="px-3 py-2 bg-slate-100 rounded">Start New Entry</button>
              <button onClick={()=>exportMonth(new Date().getFullYear(), new Date().getMonth())} className="px-3 py-2 bg-indigo-600 text-white rounded">Export Month PDF</button>
              <button onClick={()=>{ localStorage.clear(); setEntries([]); setMentorComments([]); alert('Cleared local data');}} className="px-3 py-2 bg-red-100 rounded">Clear Local Data</button>
            </div>
          </div>

          <div>
            <h3 className="font-semibold">Profile</h3>
            <input value={profile.name} onChange={e=>setProfile({...profile,name:e.target.value})} className="w-full p-2 border rounded mt-2" />
            <label className="flex items-center gap-2 text-sm mt-2"><input type="checkbox" checked={profile.mentorOptIn} onChange={e=>setProfile({...profile,mentorOptIn:e.target.checked})} /> Allow anonymized mentor review</label>
          </div>

          <div className="mt-6">
            <h3 className="font-semibold">Mini calendar</h3>
            <div className="grid grid-cols-7 gap-1 mt-2">{lastNDays(28).reverse().map(d=> (
              <div key={d.toISOString()} onClick={()=>{ setSelectedDate(d); setView('journal'); }} className={`w-8 h-8 flex items-center justify-center text-xs border rounded ${getEntry(d)? 'bg-green-200':'bg-white'}`}>{d.getDate()}</div>
            ))}</div>
          </div>

        </div>
      </div>
    </div>
  );
}
